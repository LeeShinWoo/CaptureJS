선행지식
JavaScript는 거의 대부분의 작업들이 비동기로 이루어집니다. 어떤 작업을 요청하면서 콜백 함수를 등록하면, 작업이 수행되고 나서 결과를 나중에 콜백함수를 통해 알려주는 식입니다. 실제 비동기 작업이 아니더라도 JavaScript에서는 결과를 콜백으로 알려주는 패턴이 매우 흔하게 사용됩니다.
초기에는 버튼이 눌렸을 때 콜백함수를 사용하는 정도의 수준이였기 때문에 복잡도가 높지 않았지만 현재는 콜백이 중첩되어서 하나의 작업을 콜백으로 결과를 받은 뒤 순차적으로 다음작업을 진행하는 콜백을 볼수 있습니다.
예)
$.ajax(url).done(function(text){
	$.ajax(url2).done(function(text){
		$.ajax(url3).done(function(text){
			alert('다됫다..');
		});
	});
});

이런 상황을 극복하기 위해서 Promise 라는 패턴이 제안되어 왔습니다.
Promise 패턴을 사용하면 비동기 작업들을 순차적으로 진행하거나, 병렬로 진행하는 등의 컨트롤이 보다 수월해지고 코드의 가독성이 좋아집니다!! 내부적으로 예외처리 또 한 가능하기떄문에 엄청난 가독성과 편리함을 지닐수 있습니다!!

Promise 패턴이란?
약속이란 단어로 '지금은 데이터가없으니 데이터가 있으면 주고 없다면 말을해줄께' 라는 패턴입니다.

Promise 사용 예1)
var _promise = function (param) {

	return new Promise(function (resolve, reject) {

		// 비동기를 표현하기 위해 setTimeout 함수를 사용 
		window.setTimeout(function () {

			// 파라메터가 참이면, 
			if (param) {

				// 해결됨 
				resolve("해결 완료");
			}

			// 파라메터가 거짓이면, 
			else {

				// 실패 
				reject(Error("실패!!"));
			}
		}, 3000);
	});
};

//Promise 실행
_promise(true)
.then(function (text) {
	// 성공시
	console.log(text);
}, function (error) {
	// 실패시 
	console.error(error);
});

Promise 사용 예2)
	var promise1 = new Promise(function (resolve, reject) {

    	// 비동기를 표현하기 위해 setTimeout 함수를 사용
    	window.setTimeout(function () {

    		// 해결됨
    		console.log("첫번째 Promise 완료");
    		resolve("11111");

    	}, Math.random() * 20000 + 1000);
    });

    var promise2 = new Promise(function (resolve, reject) {

    	// 비동기를 표현하기 위해 setTimeout 함수를 사용
    	window.setTimeout(function () {

    		// 해결됨
    		console.log("두번째 Promise 완료");
    		resolve("222222");
        reject(Error("실패!!"));
    	}, Math.random() * 10000 + 1000);
    });

    //모두 완료 되었을떄 확인하는 코드
    Promise.all([promise1, promise2]).then(function (values) {
    	console.log("모두 완료됨", values);
    });

이코드는 Chrome 브라우저에서 돌려야 합니다..
이렇게 Promise 객체를 사용하면 비동기 방식을 더욱더 직관적이고 효울적으로 사용할수 있다고 생각합니다!!